kafka.bootstrap.servers=cluster-2-kafka-bootstrap.replication-cluster-2.svc.cluster.local:9092

quarkus.log.level=DEBUG

mp.messaging.outgoing.simple-out.topic=simple


mp.messaging.incoming.simple-in.topic=simple

mp.messaging.outgoing.event.apicurio.registry.auto-register=true
mp.messaging.outgoing.event.value.serializer=io.apicurio.registry.serde.avro.AvroKafkaSerializer
mp.messaging.outgoing.event.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.event.apicurio.registry.artifact-resolver-strategy=io.apicurio.registry.serde.avro.strategy.RecordIdStrategy
mp.messaging.outgoing.event.apicurio.registry.avro-datum-provider=io.apicurio.registry.serde.avro.ReflectAvroDatumProvider
mp.messaging.outgoing.event.apicurio.registry.find-latest=true

#mp.messaging.incoming.event-reader.connector=smallrye-kafka
mp.messaging.incoming.event-reader.topic=event
mp.messaging.incoming.event-reader.value.deserializer=io.apicurio.registry.serde.avro.AvroKafkaDeserializer
mp.messaging.incoming.event-reader.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.event-reader.apicurio.registry.avro-datum-provider=io.apicurio.registry.serde.avro.ReflectAvroDatumProvider
mp.messaging.incoming.event-reader.apicurio.registry.use-specific-avr-reader=true


#service registry config outgoing
mp.messaging.outgoing.event.apicurio.auth.service.url=${OAUTH_SERVER_URL}
mp.messaging.outgoing.event.apicurio.auth.realm=rhoas
mp.messaging.outgoing.event.apicurio.auth.client.id=${CLIENT_ID}
mp.messaging.outgoing.event.apicurio.auth.client.secret=${CLIENT_SECRET}

#service registry config incoming
mp.messaging.incoming.event-reader.apicurio.auth.service.url=${OAUTH_SERVER_URL}
mp.messaging.incoming.event-reader.apicurio.auth.realm=rhoas
mp.messaging.incoming.event-reader.apicurio.auth.client.id=${CLIENT_ID}
mp.messaging.incoming.event-reader.apicurio.auth.client.secret=${CLIENT_SECRET}
mp.messaging.incoming.event-reader.

#global configs
mp.messaging.connector.smallrye-kafka.apicurio.registry.url=${REGISTRY_URL}
quarkus.apicurio-registry.devservices.enabled=false

#Server Configs
#mp.messaging.connector.smallrye-kafka.security.protocol=SSL
#mp.messaging.connector.smallrye-kafka.ssl.truststore.location=/mnt/secrets/truststore-new.jks
#mp.messaging.connector.smallrye-kafka.ssl.truststore.password=password
#mp.messaging.connector.smallrye-kafka.ssl.truststore.type=JKS

#User Configs
#mp.messaging.connector.smallrye-kafka.ssl.keystore.location=/mnt/kafka/user-mtls.p12
#mp.messaging.connector.smallrye-kafka.ssl.keystore.password=VUUxon7splU4
#mp.messaging.connector.smallrye-kafka.ssl.keystore.type=PKCS12


# Mutable Jar configurations
quarkus.package.type=mutable-jar
#quarkus.live-reload.password=changeit
#quarkus.live-reload.url=http://amq-streams-quarkus-quarkus-amq-streams.apps.cluster-2678.2678.example.opentlc.com

# OpenShift Extension Configurations
quarkus.container-image.build=true
quarkus.kubernetes-client.trust-certs=true
quarkus.kubernetes.deployment-target=openshift
quarkus.openshift.namespace=quarkus-amq-streams-mesh
#Mounts
quarkus.openshift.secret-volumes.truststore-secret.secret-name=kafka-truststore-new
quarkus.openshift.secret-volumes.keystore-secret.secret-name=user-mtls-keystore
quarkus.openshift.mounts.truststore-secret.path=/mnt/secrets
quarkus.openshift.mounts.keystore-secret.path=/mnt/kafka

quarkus.openshift.env.secrets=service-registry-secrets
#Annotations
quarkus.openshift.annotations."sidecar.istio.io/inject"=true

